============================= test session starts ==============================
platform darwin -- Python 3.10.6, pytest-8.2.2, pluggy-1.5.0 -- /Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/bin/python
cachedir: .pytest_cache
rootdir: /Users/sayyary/code/Mahsa-sayyary/07-ML-Ops/04-Predict-in-production/data-fast-api/tests
configfile: pytest_kitt.ini
plugins: asyncio-0.23.7, anyio-3.7.1
asyncio: mode=strict
collecting ... collected 12 items

tests/api/test_cloud_endpoints.py::test_root_is_up FAILED                [  8%]
tests/api/test_cloud_endpoints.py::test_root_returns_greeting FAILED     [ 16%]
tests/api/test_cloud_endpoints.py::test_predict_is_up FAILED             [ 25%]
tests/api/test_cloud_endpoints.py::test_predict_is_dict FAILED           [ 33%]
tests/api/test_cloud_endpoints.py::test_predict_has_key FAILED           [ 41%]
tests/api/test_cloud_endpoints.py::test_cloud_api_predict FAILED         [ 50%]
tests/api/test_endpoints.py::test_root_is_up PASSED                      [ 58%]
tests/api/test_endpoints.py::test_root_returns_greeting PASSED           [ 66%]
tests/api/test_endpoints.py::test_predict_is_up PASSED                   [ 75%]
tests/api/test_endpoints.py::test_predict_is_dict PASSED                 [ 83%]
tests/api/test_endpoints.py::test_predict_has_key PASSED                 [ 91%]
tests/api/test_endpoints.py::test_predict_val_is_float PASSED            [100%]

=================================== FAILURES ===================================
_______________________________ test_root_is_up ________________________________

    @pytest.mark.asyncio
    async def test_root_is_up():
>       async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:

tests/api/test_cloud_endpoints.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1389: in __init__
    super().__init__(
/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:179: in __init__
    self._base_url = self._enforce_trailing_slash(URL(base_url))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'URL' object has no attribute '_uri_reference'") raised in repr()] URL object at 0x12edaed10>
url = None, kwargs = {}

    def __init__(self, url: URL | str = "", **kwargs: typing.Any) -> None:
        if kwargs:
            allowed = {
                "scheme": str,
                "username": str,
                "password": str,
                "userinfo": bytes,
                "host": str,
                "port": int,
                "netloc": bytes,
                "path": str,
                "query": bytes,
                "raw_path": bytes,
                "fragment": str,
                "params": object,
            }
    
            # Perform type checking for all supported keyword arguments.
            for key, value in kwargs.items():
                if key not in allowed:
                    message = f"{key!r} is an invalid keyword argument for URL()"
                    raise TypeError(message)
                if value is not None and not isinstance(value, allowed[key]):
                    expected = allowed[key].__name__
                    seen = type(value).__name__
                    message = f"Argument {key!r} must be {expected} but got {seen}"
                    raise TypeError(message)
                if isinstance(value, bytes):
                    kwargs[key] = value.decode("ascii")
    
            if "params" in kwargs:
                # Replace any "params" keyword with the raw "query" instead.
                #
                # Ensure that empty params use `kwargs["query"] = None` rather
                # than `kwargs["query"] = ""`, so that generated URLs do not
                # include an empty trailing "?".
                params = kwargs.pop("params")
                kwargs["query"] = None if not params else str(QueryParams(params))
    
        if isinstance(url, str):
            self._uri_reference = urlparse(url, **kwargs)
        elif isinstance(url, URL):
            self._uri_reference = url._uri_reference.copy_with(**kwargs)
        else:
>           raise TypeError(
                "Invalid type for url.  Expected str or httpx.URL,"
                f" got {type(url)}: {url!r}"
            )
E           TypeError: Invalid type for url.  Expected str or httpx.URL, got <class 'NoneType'>: None

/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_urls.py:119: TypeError
__________________________ test_root_returns_greeting __________________________

    @pytest.mark.asyncio
    async def test_root_returns_greeting():
>       async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:

tests/api/test_cloud_endpoints.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1389: in __init__
    super().__init__(
/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:179: in __init__
    self._base_url = self._enforce_trailing_slash(URL(base_url))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'URL' object has no attribute '_uri_reference'") raised in repr()] URL object at 0x12edafbb0>
url = None, kwargs = {}

    def __init__(self, url: URL | str = "", **kwargs: typing.Any) -> None:
        if kwargs:
            allowed = {
                "scheme": str,
                "username": str,
                "password": str,
                "userinfo": bytes,
                "host": str,
                "port": int,
                "netloc": bytes,
                "path": str,
                "query": bytes,
                "raw_path": bytes,
                "fragment": str,
                "params": object,
            }
    
            # Perform type checking for all supported keyword arguments.
            for key, value in kwargs.items():
                if key not in allowed:
                    message = f"{key!r} is an invalid keyword argument for URL()"
                    raise TypeError(message)
                if value is not None and not isinstance(value, allowed[key]):
                    expected = allowed[key].__name__
                    seen = type(value).__name__
                    message = f"Argument {key!r} must be {expected} but got {seen}"
                    raise TypeError(message)
                if isinstance(value, bytes):
                    kwargs[key] = value.decode("ascii")
    
            if "params" in kwargs:
                # Replace any "params" keyword with the raw "query" instead.
                #
                # Ensure that empty params use `kwargs["query"] = None` rather
                # than `kwargs["query"] = ""`, so that generated URLs do not
                # include an empty trailing "?".
                params = kwargs.pop("params")
                kwargs["query"] = None if not params else str(QueryParams(params))
    
        if isinstance(url, str):
            self._uri_reference = urlparse(url, **kwargs)
        elif isinstance(url, URL):
            self._uri_reference = url._uri_reference.copy_with(**kwargs)
        else:
>           raise TypeError(
                "Invalid type for url.  Expected str or httpx.URL,"
                f" got {type(url)}: {url!r}"
            )
E           TypeError: Invalid type for url.  Expected str or httpx.URL, got <class 'NoneType'>: None

/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_urls.py:119: TypeError
______________________________ test_predict_is_up ______________________________

    @pytest.mark.asyncio
    async def test_predict_is_up():
>       async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:

tests/api/test_cloud_endpoints.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1389: in __init__
    super().__init__(
/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:179: in __init__
    self._base_url = self._enforce_trailing_slash(URL(base_url))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'URL' object has no attribute '_uri_reference'") raised in repr()] URL object at 0x1383ab5e0>
url = None, kwargs = {}

    def __init__(self, url: URL | str = "", **kwargs: typing.Any) -> None:
        if kwargs:
            allowed = {
                "scheme": str,
                "username": str,
                "password": str,
                "userinfo": bytes,
                "host": str,
                "port": int,
                "netloc": bytes,
                "path": str,
                "query": bytes,
                "raw_path": bytes,
                "fragment": str,
                "params": object,
            }
    
            # Perform type checking for all supported keyword arguments.
            for key, value in kwargs.items():
                if key not in allowed:
                    message = f"{key!r} is an invalid keyword argument for URL()"
                    raise TypeError(message)
                if value is not None and not isinstance(value, allowed[key]):
                    expected = allowed[key].__name__
                    seen = type(value).__name__
                    message = f"Argument {key!r} must be {expected} but got {seen}"
                    raise TypeError(message)
                if isinstance(value, bytes):
                    kwargs[key] = value.decode("ascii")
    
            if "params" in kwargs:
                # Replace any "params" keyword with the raw "query" instead.
                #
                # Ensure that empty params use `kwargs["query"] = None` rather
                # than `kwargs["query"] = ""`, so that generated URLs do not
                # include an empty trailing "?".
                params = kwargs.pop("params")
                kwargs["query"] = None if not params else str(QueryParams(params))
    
        if isinstance(url, str):
            self._uri_reference = urlparse(url, **kwargs)
        elif isinstance(url, URL):
            self._uri_reference = url._uri_reference.copy_with(**kwargs)
        else:
>           raise TypeError(
                "Invalid type for url.  Expected str or httpx.URL,"
                f" got {type(url)}: {url!r}"
            )
E           TypeError: Invalid type for url.  Expected str or httpx.URL, got <class 'NoneType'>: None

/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_urls.py:119: TypeError
_____________________________ test_predict_is_dict _____________________________

    @pytest.mark.asyncio
    async def test_predict_is_dict():
>       async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:

tests/api/test_cloud_endpoints.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1389: in __init__
    super().__init__(
/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:179: in __init__
    self._base_url = self._enforce_trailing_slash(URL(base_url))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'URL' object has no attribute '_uri_reference'") raised in repr()] URL object at 0x13831d990>
url = None, kwargs = {}

    def __init__(self, url: URL | str = "", **kwargs: typing.Any) -> None:
        if kwargs:
            allowed = {
                "scheme": str,
                "username": str,
                "password": str,
                "userinfo": bytes,
                "host": str,
                "port": int,
                "netloc": bytes,
                "path": str,
                "query": bytes,
                "raw_path": bytes,
                "fragment": str,
                "params": object,
            }
    
            # Perform type checking for all supported keyword arguments.
            for key, value in kwargs.items():
                if key not in allowed:
                    message = f"{key!r} is an invalid keyword argument for URL()"
                    raise TypeError(message)
                if value is not None and not isinstance(value, allowed[key]):
                    expected = allowed[key].__name__
                    seen = type(value).__name__
                    message = f"Argument {key!r} must be {expected} but got {seen}"
                    raise TypeError(message)
                if isinstance(value, bytes):
                    kwargs[key] = value.decode("ascii")
    
            if "params" in kwargs:
                # Replace any "params" keyword with the raw "query" instead.
                #
                # Ensure that empty params use `kwargs["query"] = None` rather
                # than `kwargs["query"] = ""`, so that generated URLs do not
                # include an empty trailing "?".
                params = kwargs.pop("params")
                kwargs["query"] = None if not params else str(QueryParams(params))
    
        if isinstance(url, str):
            self._uri_reference = urlparse(url, **kwargs)
        elif isinstance(url, URL):
            self._uri_reference = url._uri_reference.copy_with(**kwargs)
        else:
>           raise TypeError(
                "Invalid type for url.  Expected str or httpx.URL,"
                f" got {type(url)}: {url!r}"
            )
E           TypeError: Invalid type for url.  Expected str or httpx.URL, got <class 'NoneType'>: None

/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_urls.py:119: TypeError
_____________________________ test_predict_has_key _____________________________

    @pytest.mark.asyncio
    async def test_predict_has_key():
>       async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:

tests/api/test_cloud_endpoints.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1389: in __init__
    super().__init__(
/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:179: in __init__
    self._base_url = self._enforce_trailing_slash(URL(base_url))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'URL' object has no attribute '_uri_reference'") raised in repr()] URL object at 0x138194460>
url = None, kwargs = {}

    def __init__(self, url: URL | str = "", **kwargs: typing.Any) -> None:
        if kwargs:
            allowed = {
                "scheme": str,
                "username": str,
                "password": str,
                "userinfo": bytes,
                "host": str,
                "port": int,
                "netloc": bytes,
                "path": str,
                "query": bytes,
                "raw_path": bytes,
                "fragment": str,
                "params": object,
            }
    
            # Perform type checking for all supported keyword arguments.
            for key, value in kwargs.items():
                if key not in allowed:
                    message = f"{key!r} is an invalid keyword argument for URL()"
                    raise TypeError(message)
                if value is not None and not isinstance(value, allowed[key]):
                    expected = allowed[key].__name__
                    seen = type(value).__name__
                    message = f"Argument {key!r} must be {expected} but got {seen}"
                    raise TypeError(message)
                if isinstance(value, bytes):
                    kwargs[key] = value.decode("ascii")
    
            if "params" in kwargs:
                # Replace any "params" keyword with the raw "query" instead.
                #
                # Ensure that empty params use `kwargs["query"] = None` rather
                # than `kwargs["query"] = ""`, so that generated URLs do not
                # include an empty trailing "?".
                params = kwargs.pop("params")
                kwargs["query"] = None if not params else str(QueryParams(params))
    
        if isinstance(url, str):
            self._uri_reference = urlparse(url, **kwargs)
        elif isinstance(url, URL):
            self._uri_reference = url._uri_reference.copy_with(**kwargs)
        else:
>           raise TypeError(
                "Invalid type for url.  Expected str or httpx.URL,"
                f" got {type(url)}: {url!r}"
            )
E           TypeError: Invalid type for url.  Expected str or httpx.URL, got <class 'NoneType'>: None

/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_urls.py:119: TypeError
____________________________ test_cloud_api_predict ____________________________

    @pytest.mark.asyncio
    async def test_cloud_api_predict():
>       async with AsyncClient(base_url=SERVICE_URL, timeout=10) as ac:

tests/api/test_cloud_endpoints.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:1389: in __init__
    super().__init__(
/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_client.py:179: in __init__
    self._base_url = self._enforce_trailing_slash(URL(base_url))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'URL' object has no attribute '_uri_reference'") raised in repr()] URL object at 0x138305ed0>
url = None, kwargs = {}

    def __init__(self, url: URL | str = "", **kwargs: typing.Any) -> None:
        if kwargs:
            allowed = {
                "scheme": str,
                "username": str,
                "password": str,
                "userinfo": bytes,
                "host": str,
                "port": int,
                "netloc": bytes,
                "path": str,
                "query": bytes,
                "raw_path": bytes,
                "fragment": str,
                "params": object,
            }
    
            # Perform type checking for all supported keyword arguments.
            for key, value in kwargs.items():
                if key not in allowed:
                    message = f"{key!r} is an invalid keyword argument for URL()"
                    raise TypeError(message)
                if value is not None and not isinstance(value, allowed[key]):
                    expected = allowed[key].__name__
                    seen = type(value).__name__
                    message = f"Argument {key!r} must be {expected} but got {seen}"
                    raise TypeError(message)
                if isinstance(value, bytes):
                    kwargs[key] = value.decode("ascii")
    
            if "params" in kwargs:
                # Replace any "params" keyword with the raw "query" instead.
                #
                # Ensure that empty params use `kwargs["query"] = None` rather
                # than `kwargs["query"] = ""`, so that generated URLs do not
                # include an empty trailing "?".
                params = kwargs.pop("params")
                kwargs["query"] = None if not params else str(QueryParams(params))
    
        if isinstance(url, str):
            self._uri_reference = urlparse(url, **kwargs)
        elif isinstance(url, URL):
            self._uri_reference = url._uri_reference.copy_with(**kwargs)
        else:
>           raise TypeError(
                "Invalid type for url.  Expected str or httpx.URL,"
                f" got {type(url)}: {url!r}"
            )
E           TypeError: Invalid type for url.  Expected str or httpx.URL, got <class 'NoneType'>: None

/Users/sayyary/.pyenv/versions/3.10.6/envs/taxifare-env/lib/python3.10/site-packages/httpx/_urls.py:119: TypeError
=========================== short test summary info ============================
FAILED tests/api/test_cloud_endpoints.py::test_root_is_up - TypeError: Invali...
FAILED tests/api/test_cloud_endpoints.py::test_root_returns_greeting - TypeEr...
FAILED tests/api/test_cloud_endpoints.py::test_predict_is_up - TypeError: Inv...
FAILED tests/api/test_cloud_endpoints.py::test_predict_is_dict - TypeError: I...
FAILED tests/api/test_cloud_endpoints.py::test_predict_has_key - TypeError: I...
FAILED tests/api/test_cloud_endpoints.py::test_cloud_api_predict - TypeError:...
================== 6 failed, 6 passed, 118 warnings in 47.28s ==================
